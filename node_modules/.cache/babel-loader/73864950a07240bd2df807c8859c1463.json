{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass QuotableApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${QuotableApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get the current user. */\n\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n  /** Get authors (filtered by name if not undefined) */\n\n\n  static async getAuthors(name) {\n    let res = await this.request(\"authors\", {\n      name\n    });\n    return res.authors;\n  }\n  /** Get details on a author by handle. */\n\n\n  static async getAuthor(handle) {\n    let res = await this.request(`authors/${handle}`);\n    return res.author;\n  }\n  /** Get list of quotes (filtered by title if not undefined) */\n\n\n  static async getQuotes(title) {\n    let res = await this.request(\"quotes\", {\n      title\n    });\n    return res.quotes;\n  }\n  /** Like a quote */\n\n\n  static async LikedQuote(username, id) {\n    await this.request(`users/${username}/quotes/${id}`, {}, \"post\");\n  }\n  /** Return a liked quote */\n  // http://localhost:3001/users/testuser200/likedquotes\n  // static async seeLikedQuotes(username) {\n  //   let res = await this.request(`users/${username}/likedquotes`, {}, \"get\");\n  //   return res.username;\n  // }\n\n\n  static async getLikedQuote(username) {\n    // let res = await this.request(`users/${username}/likedquotes`, {}, \"get\");\n    let res = await this.request(`users/${username}/likedquotes`, {\n      username\n    });\n    return res.userLikes;\n  }\n  /** Get token for login from username, password. */\n\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n  /** Signup for site. */\n\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n  /** Save user profile page. */\n\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n}\n\nexport default QuotableApi;","map":{"version":3,"sources":["/Users/ashleydragan/Desktop/SPRINGBOARD/50-capstone-2-v13/50-capstone-2-v13-frontend/src/api/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","QuotableApi","request","endpoint","data","method","url","headers","Authorization","token","params","err","console","error","response","message","Array","isArray","getCurrentUser","username","res","user","getAuthors","name","authors","getAuthor","handle","author","getQuotes","title","quotes","LikedQuote","id","getLikedQuote","userLikes","login","signup","saveProfile"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass QuotableApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    // console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${QuotableApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get authors (filtered by name if not undefined) */\n\n  static async getAuthors(name) {\n    let res = await this.request(\"authors\", { name });\n    return res.authors;\n  }\n\n  /** Get details on a author by handle. */\n\n  static async getAuthor(handle) {\n    let res = await this.request(`authors/${handle}`);\n    return res.author;\n  }\n\n  /** Get list of quotes (filtered by title if not undefined) */\n\n  static async getQuotes(title) {\n    let res = await this.request(\"quotes\", { title });\n    return res.quotes;\n  }\n\n  /** Like a quote */\n\n  static async LikedQuote(username, id) {\n    await this.request(`users/${username}/quotes/${id}`, {}, \"post\");\n  }\n\n  /** Return a liked quote */\n  // http://localhost:3001/users/testuser200/likedquotes\n  // static async seeLikedQuotes(username) {\n  //   let res = await this.request(`users/${username}/likedquotes`, {}, \"get\");\n  //   return res.username;\n  // }\n  static async getLikedQuote(username) {\n    // let res = await this.request(`users/${username}/likedquotes`, {}, \"get\");\n    let res = await this.request(`users/${username}/likedquotes`, { username });\n    return res.userLikes;\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default QuotableApi;\n"]},"metadata":{},"sourceType":"module"}