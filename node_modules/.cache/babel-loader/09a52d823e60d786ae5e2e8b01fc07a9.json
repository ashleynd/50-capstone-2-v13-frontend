{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nconst useFetch = (url, options = {}) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // after the first render, fetch our data\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url); // console.log(url)\n\n        const json = await res.json();\n        setResponse(json);\n      } catch (error) {\n        setError(error);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    response,\n    error,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/ashleydragan/Desktop/SPRINGBOARD/50-capstone-attempts/50-capstone-2-v12/50-capstone-2-v12-frontend/src/hooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","options","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","res","fetch","json"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C,CAHsC,CAKtC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAD,CAAvB,CADE,CAEF;;AACA,cAAMW,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACAR,QAAAA,WAAW,CAACQ,IAAD,CAAX;AACD,OALD,CAKE,OAAOP,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AACDG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAVD;;AAWAC,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACR,GAAD,CAbM,CAAT;AAeA,SAAO;AAAEE,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAtBD;;AAwBA,eAAeP,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useFetch = (url, options = {}) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // after the first render, fetch our data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url);\n        // console.log(url)\n        const json = await res.json();\n        setResponse(json);\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [url]);\n\n  return { response, error, isLoading };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}